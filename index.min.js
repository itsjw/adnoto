"use strict";const freeze=require("functional-freeze");const forEach=require("lodash/forEach");const assign=require("lodash/fp/assign");const reduce=require("lodash/reduce");const listeners=[];const effects=[];let reducers=Object.create(null);let state=freeze(Object.create(null));const isNotReducer=func=>!func||typeof func!=="function"||!func.name;const dispatch=action=>{forEach(effects,effect=>{effect(action)});state=freeze(reduce(reducers,(result,reducer,key)=>{result[key]=reducer(state[key],action);return result},{}));forEach(listeners,listen=>{listen(state)})};const addReducer=func=>{if(isNotReducer(func))throw Error("Not a reducer function.");reducers[func.name]=func;state=freeze(assign(state,{[func.name]:func()}));forEach(listeners,listen=>{listen(state)})};function initialReducers(){const result=reduce(arguments,(result,reducer)=>{if(isNotReducer(reducer))throw Error("Not a reducer function.");result.state[reducer.name]=reducer();result.reducers[reducer.name]=reducer;return result},{state:Object.create(null),reducers:Object.create(null)});reducers=result.reducers;state=freeze(result.state)}const subscribe=func=>{listeners.push(func)};const reset=()=>{state=freeze(Object.create(null));reducers=Object.create(null);listeners.length=0;effects.length=0};const sideEffect=func=>{effects.push(func)};const select=func=>func(state);module.exports={subscribe:subscribe,dispatch:dispatch,addReducer:addReducer,initialReducers:initialReducers,reset:reset,sideEffect:sideEffect,select:select};
